[{"key":"a09c723f161cfc975ee259f27fad95475755e744","createAt":1541636849720,"updateAt":1541637067761,"copy":0,"tags":[],"name":"vb-ArrayFunction","description":"","files":[{"key":"4c10f7c384f107cb376cafb47d1cc06362405963","name":"IsInArray","value":"'' Determines whether a string has the same value in an array\n'' @stringToBeFound  :  to be found string\n'' @arr              :  use to found in array\nFunction IsInArray(stringToBeFound As String, arr As Variant) As Long\nDim i As Long\n' default return value if value not found in array\nIsInArray = -1\n\nif Initialized(arr) then\n    For i = LBound(arr) To UBound(arr)\n      If StrComp(stringToBeFound, arr(i), vbTextCompare) = 0 Then\n        IsInArray = i\n        Exit For\n      End If\n    Next i\nelse\n    IsInArray = -2\nEnd If\n\nEnd Function"},{"key":"3de06fc5e3b11e0aa63c31608791f49ab8acfd64","name":"pushArray","value":"'' push  value in an array\n'' @arr              :  not need dim length in advance\nSub pushArray(val As Variant, ByRef resizeArr As Variant)\n\nOn Error GoTo FIRST\nReDim Preserve resizeArr(UBound(resizeArr) + 1)\n\nresizeArr(UBound(resizeArr)) = val\n\nExit Sub\n\nFIRST:\nReDim resizeArr(0)\nresizeArr(0) = val\n\nEnd Sub"},{"key":"8ab176a699ce1a9dbb5e0ec510ef385d8e27b04e","name":"pushArrayToArray","value":"'' push  arr2 to another arr1\nFunction pushArrayToArray(ByRef arr1 As Variant, ByVal arr2 As Variant) As Long\n  Dim i As Integer\n\n  For i = LBound(arr2) To UBound(arr2)\n    pushArray arr2(i), arr1\n  Next i\n\nEnd Function"},{"key":"7f05a8dda8850429aa5e09fd6a9f78a1bad233a9","name":"pushRangeToArrayNoRepetition","value":"'' push value of range into a array and no repetition\n'' @range\n'' @arr  : array with contain distinct value\nFunction pushRangeToArrayNoRepetition(ByVal Range As Excel.Range, ByRef arr() As Variant)\n    Dim c As Excel.Range\n    Dim str As String\n\n    For Each c In Range\n        If c.Value2 <> \"\" Then\n            str = c.Value2\n        End If\n\n        '-1 :   no find string, -2 : array no init\n        If IsInArray(str, arr) < 0 Then\n            pushArray2 str, arr\n        End If\n\n    Next\nEnd Function"},{"key":"0140aff2fd9c75012a91b8bfc35b961b3aa89f64","name":"pushRangeToArray","value":"'' push value of range into a array\n'' @range\n'' @arr  : array with contain distinct value\nFunction pushRangeToArray(ByVal Range As Excel.Range, ByRef arr() As Variant)\n    Dim c As Excel.Range\n    Dim str As String\n\n    For Each c In Range\n        If c.Value2 <> \"\" Then\n            str = c.Value2\n        End If\n\n        pushArray2 str, arr\n\n    Next\nEnd Function"},{"key":"92ee4cda0568013b255882f9a5c5687b299295e1","name":"supSplit","value":"'' find splite sign in string,return array.if not find return 0\nFunction supSplit(ByVal str As String, Optional ByRef flag As Integer) As String()\nDim aStr(0) As String\nflag = 1\n\nIf InStr(str, \",\") > 0 Then\n    supSplit = Split(str, \",\")\nElseIf InStr(str, \":\") > 0 Then\n    supSplit = Split(str, \":\")\nElseIf InStr(str, \"|\") > 0 Then\n    supSplit = Split(str, \"|\")\nElseIf InStr(str, \"\\\") > 0 Then\n    supSplit = Split(str, \"\\\")\nElseIf InStr(str, \";\") > 0 Then\n    supSplit = Split(str, \";\")\nElseIf InStr(str, \"_\") > 0 Then\n    supSplit = Split(str, \"_\")\nElseIf InStr(str, \"-\") > 0 Then\n    supSplit = Split(str, \"-\")\nElse\n    aStr(0) = str\n    supSplit = aStr\n    flag = 0\nEnd If\n\n\nEnd Function"},{"key":"3beef7616c4bec05c6f2e150a955e7fecec42b33","name":"countArrayNotEmpte","value":"'' return count of element of array,and element is not \"\"\nFunction countArrayNotEmpte(ByVal arr As Variant) As Integer\nDim count As Integer\nDim i As Integer\n\nFor i = LBound(arr) To UBound(arr)\n    If arr(i) <> \"\" Then\n        count = count + 1\n    End If\nNext i\n\ncountArrayNotEmpte = count\n\nEnd Function"},{"key":"0690b10f0c957f8aa4d979803529c12ffc433985","name":"countArray","value":"Function countArray(ByVal arr As Variant) As Integer\nDim i As Variant\nDim count As Integer\n\nFor Each i In arr\n    count = count + 1\nNext\n\ncountArray = count\n\nEnd Function"},{"key":"961a1f074c91af8b9cbab08db8f0745acc2d1a55","name":"Initialized","value":"'' Determine if Array is not Initialized\nFunction Initialized(val) As Boolean\nOn Error GoTo errHandler\n    Dim i\n\n    If Not IsArray(val) Then GoTo exitRoutine\n\n    i = UBound(val)\n\n    Initialized = True\nexitRoutine:\n    Exit Function\nerrHandler:\n    Select Case Err.Number\n        Case 9 'Subscript out of range\n            GoTo exitRoutine\n        Case Else\n            Debug.Print Err.Number & \": \" & Err.Description, _\n                \"Error in Initialized()\"\n    End Select\n    Debug.Assert False\n    Resume\nEnd Function"},{"key":"1c68a612d13889a3a0de49195adf37b9a9661b4d","name":"pushArrayToRange","value":"'' 将一个array中的值填充到一个range中\n'' @range\n'' @arr  :\nFunction pushArrayToRange(ByRef arr As Variant, ByVal range As Excel.range)\nDim i As Long\nDim j As Long\n\nj = 1\n\nFor i = LBound(arr) To UBound(arr)\n    If  j <= range.Count Then\n        range.Item(j) = arr(i)\n        j = j + 1\n    End If\nNext i\n\nEnd Function"},{"key":"901a6b055fead1112848e4663926e1a4c9869c0c","name":"pushArrayToSingleColumnRange","value":"''push element of array into a range of single column type from up to down\n'@arr           :   array by pushed\n'@startCell    :   range type , the first cell by pushed\nSub pushArrayToSingleColumnRange(arr As Variant, ByVal startCell As range)\nDim i As Long\nDim c As range\n\nFor i = 0 To UBound(arr)\n        Set c = startCell.Offset(rowoffset:=i)\n        c.Value2 = arr(i)\nNext i\n\nEnd Sub"}]}]